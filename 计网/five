5.1.1   进程之间的通信
用户功能中的最低层(应用 运输)
面向通信部分的最高层(运输 网络 数据链路层 物理)


网络层为主机之间的通信提供服务
运输层为应用层进程之间的通信提供服务
运输层提供应用进程间的逻辑通信


屏蔽作用
运输层向高层用户屏蔽了下面网络核心的细节（如网络拓扑、所采用的路由选择协议等），使应用进程看见的就是好像在两个运输层实体之间有一条端到端的逻辑通信信道。

可靠信道与不可靠信道
使用面向连接的协议，如 TCP。

使用无连接的协议，如 UDP。

5.1.2   运输层的两个主要协议
互联网的正式标准：
用户数据报协议 UDP (User Datagram Protocol)
传输控制协议 TCP (Transmission Control Protocol)

运输协议数据单元 
两个对等运输实体在通信时传送的数据单位叫作运输协议数据单元 TPDU (Transport Protocol Data Unit)。
TCP 传送的数据单位协议是 TCP 报文段 (segment)。
UDP 传送的数据单位协议是 UDP 报文或用户数据报。 

UDP
传送数据之前不需要先建立连接。
收到 UDP 报后，不需要给出任何确认。
不提供可靠交付，但是一种最有效的工作方式。

TCP
提供可靠的、面向连接的运输服务。
不提供广播或多播服务。
开销较多。


5.1.3   运输层的端口
复用：应用进程都可以通过运输层再传送到 IP 层（网络层）。
分用：运输层从 IP 层收到发送给应用进程的数据后，必须分别交付给指明的各应用进程。


进程的创建和撤销都是动态的，因此发送方几乎无法识别其他机器上的进程。
我们往往需要利用目的主机提供的功能来识别终点，而不需要知道具体实现这个功能的进程是哪一个。
有时我们会改换接收报文的进程，但并不需要通知所有的发送方。


端口号 (protocol port number)
解决方法：在运输层使用协议端口号 (protocol port number)，或通常简称为端口 (port)。把端口设为通信的抽象终点。


软件端口
协议栈层间的抽象的协议端口。
是应用层的各种协议进程与运输实体进行层间交互的地点。
不同系统实现端口的方法可以不同。

硬件端口
不同硬件设备进行交互的接口。

TCP/IP 运输层端口的标志
端口用一个 16 位端口号进行标志，允许有 65,535 个不同的端口号。
端口号只具有本地意义，只是为了标志本计算机应用层中的各进程。
在互联网中，不同计算机的相同端口号没有联系。



5.2.1  UDP 概述
UDP 只在 IP 的数据报服务之上增加了一些功能：
复用和分用
差错检测

UDP 的主要特点
无连接。发送数据之前不需要建立连接。
使用尽最大努力交付。即不保证可靠交付。
面向报文。UDP 一次传送和交付一个完整的报文。 
没有拥塞控制。网络出现的拥塞不会使源主机的发送速率降低。很适合多媒体通信的要求。 
支持一对一、一对多、多对一、多对多等交互通信。
首部开销小，只有 8 个字节。

UDP 通信的特点：简单方便，但不可靠。

发送方 UDP 对应用层交下来的报文，既不合并，也不拆分，按照样发送。
接收方 UDP 对 IP 层交上来的 UDP 用户数据报，去除首部后就原封不动地交付上层的应用进程，一次交付一个完整的报文。
应用程序必须选择合适大小的报文。
若报文太长，IP 层在传送时可能要进行分片，降低 IP 层的效率。
若报文太短，会使 IP 数据报的首部的相对长度太大，降低 IP 层的效率。

复用：将 UDP 用户数据报组装成不同的 IP 数据报，发送到互联网。
分用：根据 UDP 用户数据报首部中的目的端口号，将数据报分别传送到相应的端口，以便应用进程到端口读取数据。


5.2.2  UDP 的首部格式

(1) 源端口：源端口号。在需要对方回信时选用。不需要时可用全 0。
(2) 目的端口：目的端口号。终点交付报文时必须使用。
(3) 长度：UDP 用户数据报的长度，其最小值是 8（仅有首部）。
(4) 检验和：检测 UDP 用户数据报在传输中是否有错。有错就丢弃。

用户数据报 UDP 有两个字段：数据字段和首部字段。首部字段有 8 个字节，由 4 个字段组成，每个字段都是 2 个字节。

接收方 UDP 根据首部中的目的端口号，把报文通过相应的端口上交给应用进程。
如果接收方 UDP 发现收到的报文中的目的端口号不正确（即不存在对应于该端口号的应用进程），就丢弃该报文，并由 ICMP 发送“端口不可达”差错报文给发送方。

在计算检验和时，临时把 12 字节的“伪首部”和 UDP 用户数据报连接在一起。伪首部仅仅是为了计算检验和。


5.3.1  TCP 最主要的特点
TCP 是面向连接的运输层协议，在无连接的、不可靠的 IP 网络服务基础之上提供可靠交付的服务。为此，在 IP 的数据报服务基础之上，增加了保证可靠性的一系列措施。

TCP 是面向连接的运输层协议。
每一条 TCP 连接只能有两个端点 (endpoint)，每一条 TCP 连接只能是点对点的（一对一）。 
TCP 提供可靠交付的服务。
TCP 提供全双工通信。
面向字节流
TCP 中的“流”(stream) 指的是流入或流出进程的字节序列。
面向字节流：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流。

TCP 面向流的概念
TCP 不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系。
但接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样。


5.3.2  TCP 的连接
TCP 连接的端点：套接字 (socket) 或插口。

套接字 socket = (IP地址 : 端口号)                   (5-1)
套接字 socket = (192.169.1.20 : 2028)

每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）所确定：
TCP 连接 ::= {socket1, socket2} = {(IP1: port1)，(IP2: port2)}      (5-2)

TCP 连接就是由协议软件所提供的一种抽象。
TCP 连接的端点是抽象的套接字，即（IP 地址：端口号）。
同一个 IP 地址可以有多个不同的 TCP 连接。
同一个端口号也可以出现在多个不同的 TCP 连接中。


IP 网络提供的是不可靠的传输

理想传输条件的特点
传输信道不产生差错。
不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据。
在理想传输条件下，不需要采取任何措施就能够实现可靠传输。
但实际网络都不具备理想传输条件。必须使用一些可靠传输协议，在不可靠的传输信道实现可靠传输。


5.4.1  停止等待协议
每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。
全双工通信的双方既是发送方也是接收方。
假设仅考虑 A 发送数据，而 B 接收数据并发送确认。因此 A 叫做发送方，而 B 叫做接收方。

1. 无差错情况
A 发送完分组 M1 后就暂停发送，等待 B 的确认 (ACK)。
B 收到 M1 向 A 发送  ACK。
A 在收到了对 M1 的确认后，就再发送下一个分组  M2。

2. 出现差错
两种情况：
B 接收 M1 时检测出了差错，就丢弃 M1，其他什么也不做（不通知 A 收到有差错的分组）。
M1 在传输过程中丢失了，这时 B 当然什么都不知道，也什么都不做。

在这两种情况下，B 都不会发送任何信息。

解决方法：超时重传
A 为每一个已发送的分组设置一个超时计时器。
A 只要在超时计时器到期之前收到了相应的确认，就撤销该超时计时器，继续发送下一个分组 M2 。
若 A 在超时计时器规定时间内没有收到 B 的确认，就认为分组错误或丢失，就重发该分组。

确认丢失
若 B 所发送的对 M1 的确认丢失了，那么 A 在设定的超时重传时间内将不会收到确认，因此 A 在超时计时器到期后重传 M1。
假定 B 正确收到了 A 重传的分组 M1。这时 B 应采取两个行动：
(1) 丢弃这个重复的分组 M1，不向上层交付。
(2) 向 A 发送确认。

确认迟到
B 对分组 M1 的确认迟到了，因此 A 在超时计时器到期后重传 M1。
B 会收到重复的 M1，丢弃重复的 M1，并重传确认分组。
A 会收到重复的确认。对重复的确认的处理：丢弃。


4. 信道利用率

信道利用率
U=TD/(TD+RTT+TA)
当往返时间RTT远大于分组发送时间TD时，信道的利用率会非常低
优点：简单。缺点：信道利用率太低。


停止等待协议要点
停止等待。发送方每次只发送一个分组。在收到确认后再发送下一个分组。
暂存：在发送完一个分组后，发送方必须暂存已发送的分组的副本，以备重发。
编号。对发送的每个分组和确认都进行编号。
超时重传。发送方为发送的每个分组设置一个超时计时器。若超时计时器超时位收到确认，发送方会自动超时重传分组。
超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些，防止不必要的重传。
简单，但信道利用率太低。


5.4.2   连续 ARQ 协议
发送窗口：发送方维持一个发送窗口，位于发送窗口内的分组都可被连续发送出去，而不需要等待对方的确认。
发送窗口滑动：发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。
累积确认：接收方对按序到达的最后一个分组发送确认，表示：到这个分组为止的所有分组都已正确收到了。

优点
容易实现，即使确认丢失也不必重传。
缺点
不能向发送方反映出接收方已经正确收到的所有分组的信息。

连续 ARQ 协议采用 Go-back-N（回退N）。
Go-back-N（回退N）：表示需要再退回来重传已发送过的 N 个分组。
当通信线路质量不好时，连续 ARQ 协议会带来负面的影响。


5.5  TCP 报文段的首部格式
TCP 虽然是面向字节流的，但 TCP 传送的数据单元却是报文段。
一个 TCP 报文段分为首部和数据两部分，而 TCP 的全部功能都体现在它首部中各字段的作用。
TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。因此 TCP 首部的最小长度是 20 字节。

源端口和目的端口：各占 2 字节。端口是运输层与应用层的服务接口。
运输层的复用和分用功能通过端口实现。 

序号：占 4 字节。TCP 连接中传送的数据流中的每一个字节都有一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。
现有 5000 个字节的数据。
假设报文段的最大数据长度为 1000 个字节，初始序号为 1001。
报文段 1 序号 = 1001 （数据字节序号：1001 ~ 2000）
报文段 5 序号 = 5001 （数据字节序号：5001 ~ 6000）

认号：占 4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号。 
记住：若确认号 = N，则表明：到序号 N – 1 为止的所有数据都已正确收到。

数据偏移（即首部长度）：占 4 位，指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。单位是 32 位字（以 4 字节为计算单位）。

保留：占 6 位，保留为今后使用，但目前应置为 0。

紧急 URG：控制位。当 URG = 1 时，表明紧急指针字段有效，告诉系统此报文段中有紧急数据，应尽快传送 (相当于高优先级的数据)。 

确认 ACK：控制位。只有当 ACK =1 时，确认号字段才有效。当 ACK =0 时，确认号无效。

推送 PSH (PuSH) ：控制位。接收 TCP 收到 PSH = 1 的报文段后，就尽快（即“推送”向前）交付接收应用进程，而不再等到整个缓存都填满后再交付。 

复位 RST (ReSeT) ：控制位。当 RST=1 时，表明 TCP 连接中出现严重差错（如主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。


同步 SYN (SYNchronization) ：控制位。
同步 SYN = 1 表示这是一个连接请求或连接接受报文。 
当 SYN = 1，ACK = 0 时，表明这是一个连接请求报文段。
当 SYN = 1，ACK = 1 时，表明这是一个连接接受报文段。

终止 FIN (FINish) ：控制位。用来释放一个连接。
FIN=1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。

窗口：占 2 字节。
窗口值告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量（以字节为单位）。
记住：窗口字段明确指出了现在允许对方发送的数据量。窗口值经常在动态变化

检验和：占 2 字节。检验和字段检验的范围包括首部和数据这两部分。
在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。


紧急指针：占 2 字节。在 URG = 1时，指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据），指出了紧急数据的末尾在报文段中的位置。

选项：长度可变，最长可达 40 字节。

填充：使整个 TCP 首部长度是 4 字节的整数倍。


MSS (Maximum Segment Size)
是 TCP 报文段中的数据字段的最大长度。
数据字段加上 TCP 首部才等于整个的 TCP 报文段。
所以，MSS是“TCP 报文段长度减去 TCP 首部长度”。
选项：长度可变，最长可达 40 字节。—— 长度可变。TCP 最初只规定了一种选项，即最大报文段长度 MSS。MSS 告诉对方 TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节。”

TCP 报文段长度 = 数据字段长度 + TCP 首部长度

最大报文段长度 MSS
不能太小
网络利用率降低。
例如：仅 1 个字节。利用率就不会超过1/41。

不能太大
开销增大。
IP 层传输时要分片，终点要装配。
分片传输出错时，要整个分组

应尽可能大
只要在 IP 层传输时不再分片。
默认值= 536 字节。
报文段长度 = 536 + 20 = 556 字节。
IP 数据报长度 = 576 字节


窗口扩大
TCP 窗口字段长度= 16 位，最大窗口大小 = 64 K 字节。
对于传播时延和带宽都很大的网络，为获得高吞吐率较，需要更大的窗口。

窗口扩大选项：占 3 字节，其中一个字节表示移位值 S。
新的窗口值位数从 16 增大到 (16 + S)，相当于把窗口值向左移动 S 位。
移位值允许使用的最大值是 14，窗口最大值增大到 2(16 + 14) – 1 = 230 – 1。
窗口扩大选项可以在双方初始建立 TCP 连接时进行协商。


时间戳
占 10 字节。最主要的 2 个字段：
	时间戳值字段（4字节）和时间戳回送回答字段（4字节）。
2 个主要功能：
计算往返时间 RTT
防止序号绕回 PAWS (Protect Against Wrapped Sequence numbers)。
序号重复时，为了使接收方能够把新报文段和迟到很久的旧报文段区分开，可以在报文段中加上时间戳。


5.6.1   以字节为单位的滑动窗口
TCP 使用流水线传输和滑动窗口协议实现高效、可靠的传输。
TCP 的滑动窗口是以字节为单位的。
发送方 A 和接收方 B 分别维持一个发送窗口和一个接收窗口。
发送窗口：在没有收到确认的情况下，发送方可以连续把窗口内的数据全部发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。
接收窗口：只允许接收落入窗口内的数据。

暂时存放：
(1) 发送应用程序传送给发送方 TCP 准备发送的数据；
(2)  TCP 已发送出但尚未收到确认的数据。

若不能及时读取，缓存最终会被填满，使接收窗口减小到零。
如果能够及时读取，接收窗口就可以增大，但最大不能超过接收缓存的大小。


第一，发送窗口是根据接收窗口设置的，但在同一时刻，发送窗口并不总是和接收窗口一样大（因为有一定的时间滞后）。
第二，TCP 标准没有规定对不按序到达的数据应如何处理。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。
第三，TCP 要求接收方必须有累积确认的功能，以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。但接收方不应过分推迟发送确认，否则会导致发送方不必要的重传，捎带确认实际上并不经常发生。


5.6.2   超时重传时间的选择
不能太短，否则会引起很多报文段的不必要的重传，使网络负荷增大。
不能过长，会使网络的空闲时间增大，降低了传输效率。

TCP 采用了一种自适应算法，它记录一个报文段发出的时间，以及收到相应确认的时间。
这两个时间之差就是报文段的往返时间 RTT。

加权平均往返时间 RTTS 又称为平滑的往返时间。
新的 RTTS  = (1 - ) x (旧的 RTTS)  +  x (新的 RTT 样本)       (5-4)

其中0<=@<1
若@趋紧0表示RTT值更新较慢
若趋紧1表示更新较快
RFC6298推荐的值为1/8，0.125


超时重传时间 RTO
RTO (Retransmission Time-Out) 应略大于加权平均往返时间 RTTS 。
RFC 6298 建议 RTO：
RTO = RTTS + 4 x RTTD
其中：RTTD 是 RTT 偏差的加权平均值。


RFC 6298 建议 RTTD ：
新的 RTTD = (1 -  ) x (旧的 RTTD)  +   x |RTTS - 新的 RTT 样本|
其中： 是个小于 1 的系数，其推荐值是 1/4，即 0.25。


Karn 算法
在计算平均往返时间 RTT 时，只要报文段重传了，就不采用其往返时间样本。
新问题：当报文段的时延突然增大很多时，在原来得出的重传时间内，不会收到确认报文段，于是就重传报文段。但根据 Karn 算法，不考虑重传的报文段的往返时间样本。这样，超时重传时间就无法更新，造成很多不必要的重传。

报文段每重传一次，就把 RTO 增大一些：
新的 RTO =  x  (旧的 RTO)
系数  的典型值 = 2 
当不再发生报文段的重传时，才根据报文段的往返时延更新平均往返时延 RTT 和超时重传时间 RTO 的数值。


5.6.3   选择确认 SACK
如果要使用选择确认，在建立 TCP 连接时，要在 TCP 首部的选项中加上允许 SACK 选项，且双方必须事先商定好。
如果使用选择确认，原来首部中的确认号的用法仍然不变（累积确认）。只是在 TCP 首部中都增加了 SACK 选项，以便报告收到的不连续的字节块的边界。


5.7.1   利用滑动窗口实现流量控制
流量控制 (flow control) ：让发送方的发送速率不要太快，使接收方来得及接收。
利用滑动窗口机制可以很方便地在 TCP 连接上实现对发送方的流量控制。 

持续计时器  (persistence timer)：只要 TCP 连接的一方收到对方的零窗口通知，就启动该持续计时器。
若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据），对方在确认这个探测报文段时给出当前窗口值。
若窗口仍然是零，收到这个报文段的一方就重新设置持续计时器。
若窗口不是零，则死锁的僵局就可以打破了。


5.7.2   TCP 的传输效率
控制TCP发送报文段的时机：三种机制
TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP 报文段发送出去。
由发送方的应用进程指明要求发送报文段，即 TCP 支持的推送 (push) 操作。
发送方的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（但长度不能超过 MSS）发送出去。


解决方法：让接收方等待一段时间，使得或者接收缓存已有足够空间容纳一个最长的报文段，或者等到接收缓存已有一半空闲的空间。只要出现这两种情况之一，接收方就发出确认报文，并向发送方通知当前的窗口大小。
上述两种方法可配合使用，使得在发送方不发送很小的报文段的同时，接收方也不要在缓存刚刚有了一点小的空间就急忙把这个很小的窗口大小信息通知给发送方。



5.8.1   拥塞控制的一般原理
在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。这种现象称为拥塞 (congestion)。
最坏结果：系统崩溃。

拥塞产生的原因
由许多因素引起。例如：
节点缓存容量太小；
链路容量不足；
处理机处理速率太慢；
拥塞本身会进一步加剧拥塞

增大缓存，但未提高输出链路的容量和处理机的速度，排队等待时间将会大大增加，引起大量超时重传，解决不了网络拥塞；
提高处理机处理的速率会将瓶颈转移到其他地方；
拥塞引起的重传并不会缓解网络的拥塞，反而会加剧网络的拥塞。


拥塞控制与流量控制的区别
拥塞控制
防止过多的数据注入到网络中，避免网络中的路由器或链路过载。
是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。

流量控制
抑制发送端发送数据的速率，以使接收端来得及接收。
点对点通信量的控制，是个端到端的问题。


拥塞控制的前提：网络能够承受现有的网络负荷。
实践证明，拥塞控制是很难设计的，因为它是一个动态问题。
分组的丢失是网络发生拥塞的征兆，而不是原因。
在许多情况下，甚至正是拥塞控制本身成为引起网络性能恶化、甚至发生死锁的原因。

开环控制
在设计网络时，事先考虑周全，力求工作时不发生拥塞。
思路：力争避免发生拥塞。
但一旦整个系统运行起来，就不再中途进行改正了。

闭环控制
基于反馈环路的概念。
根据网络当前运行状态采取相应控制措施。
思路：在发生拥塞后，采取措施进行控制，消除拥塞。
1 监测 监测网络系统，检测拥塞在何时、何处发生
主要指标有：
由于缺少缓存空间而被丢弃的分组的百分数；
平均队列长度；
超时重传的分组数；
平均分组时延；
分组时延的标准差，等等。
这些指标的上升都标志着拥塞的增长

2 传送 将拥塞发生的信息传送到可采取行动的地方
将拥塞发生的信息传送到产生分组的源站。
在路由器转发的分组中保留一个比特或字段，用该比特或字段的值表示网络没有拥塞或产生了拥塞。
周期性地发出探测分组等。

3 调整 调整网络系统的运行以解决出现的问题
过于频繁，会使系统产生不稳定的振荡。
过于迟缓，不具有任何实用价值。
选择正确的时间常数是相当困难的。


5.8.2  TCP 的拥塞控制方法
TCP 采用基于滑动窗口的方法进行拥塞控制，属于闭环控制方法。
TCP 发送方维持一个拥塞窗口 cwnd (Congestion Window)
拥塞窗口的大小取决于网络的拥塞程度，并且是动态变化的。
发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。
发送窗口大小不仅取决于接收方窗口，还取决于网络的拥塞状况。
真正的发送窗口值：
真正的发送窗口值 = Min (接收方通知的窗口值，拥塞窗口值)

只要网络没有出现拥塞，拥塞窗口就可以再增大一些，以便把更多的分组发送出去，提高网络的利用率。
但只要网络出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些，以减少注入到网络中的分组数，缓解网络出现的拥塞。


发送方判断拥塞的方法：隐式反馈
超时重传计时器超时  网络已经出现了拥塞。
收到 3 个重复的确认 预示网络可能会出现拥塞。
因传输出差错而丢弃分组的概率很小（远小于1 %）。
因此，发送方在超时重传计时器启动时，就判断网络出现了拥塞。
 


四种拥塞控制算法（ RFC 5681） ：
慢开始 (slow-start)
拥塞避免 (congestion avoidance)
快重传 (fast retransmit)
快恢复 (fast recovery)

1. 慢开始 (Slow start)
目的：探测网络的负载能力或拥塞程度。
算法：由小到大逐渐增大注入到网络中的数据字节，即：由小到大逐渐增大拥塞窗口数值。
2 个控制变量：拥塞窗口 cwnd
初始值：2 种设置方法。
1 至 2 个最大报文段 MSS （旧标准）
2 至 4 个最大报文段 MSS（RFC 5681）
慢开始门限 ssthresh
防止拥塞窗口增长过大引起网络拥塞。

拥塞窗口 cwnd 增大：在每收到一个对新的报文段的确认，就把拥塞窗口增加最多一个发送方的最大报文段 SMSS  (Sender Maximum Segment Size) 的数值。
拥塞窗口 cwnd 每次的增加量 = min (N, SMSS)


2. 拥塞避免
目的：让拥塞窗口 cwnd 缓慢地增大，避免出现拥塞。
拥塞窗口 cwnd 增大：每经过一个往返时间 RTT（不管在此期间收到了多少确认），发送方的拥塞窗口 cwnd = cwnd + 1。
具有加法增大 AI (Additive Increase) 特点：使拥塞窗口 cwnd 按线性规律缓慢增长。


快重传 FR (Fast Retransmission) 算法
目的：让发送方尽早知道发生了个别报文段的丢失。
发送方只要连续收到三个重复的确认，就立即进行重传（即“快重传”），这样就不会出现超时。
使用快重传可以使整个网络的吞吐量提高约 20%。
快重传算法要求接收方立即发送确认，即使收到了失序的报文段，也要立即发出对已收到的报文段的重复确认。

快恢复 FR (Fast Recovery)算法

当发送端收到连续三个重复的确认时，不执行慢开始算法，而是执行快恢复算法 FR (Fast Recovery) 算法：
慢开始门限 ssthresh = 当前拥塞窗口 cwnd / 2 ；
乘法减小 MD (Multiplicative Decrease) 拥塞窗口。
     新拥塞窗口 cwnd = 慢开始门限 ssthresh ；
执行拥塞避免算法，使拥塞窗口缓慢地线性增大（加法增大 AI）

5.8.3   主动队列管理 AQM


运输连接的三个阶段
TCP 是面向连接的协议。
TCP 连接有三个阶段：
连接建立
数据传送
连接释放
TCP 的连接管理就是使 TCP 连接的建立和释放都能正常地进行。

TCP 连接的建立采用客户服务器方式。
主动发起连接建立的应用进程叫做客户 (client)。
被动等待连接建立的应用进程叫做服务器 (server)。


5.9.1  TCP 的连接建立
TCP 建立连接的过程叫做握手。
采用三报文握手：在客户和服务器之间交换三个 TCP 报文段，以防止已失效的连接请求报文段突然又传送到了，因而产生 TCP 连接建立错误。


A 的 TCP 向 B 主动发出连接请求报文段，其首部中的同步位 SYN = 1，并选择序号 seq = x，表明传送数据时的第一个数据字节的序号是 x。
注意：TCP规定，SYN 报文段（即SYN = 1的报文段）不能携带数据，但要消耗掉一个序号。

B 的 TCP 收到连接请求报文段后，如同意，则发回确认。
B 在确认报文段中应使 SYN = 1，使 ACK = 1，其确认号 ack = x + 1，自己选择的序号 seq = y。
这个报文段也不能携带数据，但同样要消耗掉一个序号

A 收到此报文段后向 B 给出确认，其 ACK = 1，确认号 ack = y + 1。
A 的 TCP 通知上层应用进程，连接已经建立。 
TCP 标准规定：ACK 报文段可以携带数据。
但如果不携带数据，则不消耗序号。下一个数据报文段的序号仍是 seq = x + 1


5.9.2  TCP 的连接释放
TCP 连接释放过程比较复杂。
数据传输结束后，通信的双方都可释放连接。
TCP 连接释放过程是四报文握手。

A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。
A 把连接释放报文段首部的 FIN = 1，其序号seq = u，等待 B 的确认。
TCP规定：FIN 报文段即使不携带数据，也消耗掉一个序号。

B 发出确认，ACK=1，确认号 ack = u+1，这个报文段的序号 seq = v。
TCP 服务器进程通知高层应用进程。
从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭 (half-close) 状态。B 若发送数据，A 仍要接收。

若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。 
FIN=1，ACK=1，确认号 ack = u+1。

 A 收到连接释放报文段后，必须发出确认。
 ACK=1，确认号 ack=w+1，自己的序号 seq = u + 1

请注意：此时 TCP 连接还没有释放掉。必须经过时间等待计时器 (TIME-WAIT timer) 设置的时间 2MSL 后，A 才释放 TCP 连接

必须等待 2MSL 的时间
第一，保证发送的最后一个 ACK 报文段能够到达 B。
第二，防止“已失效的连接请求报文段”出现在本连接中。

保活计时器
用来防止在 TCP 连接出现长时期空闲。
通常设置为 2 小时 。
若服务器过了 2 小时还没有收到客户的信息，它就发送探测报文段。
若发送了 10 个探测报文段（每一个相隔 75 秒）还没有响应，就假定客户出了故障，因而就终止该连接。 
