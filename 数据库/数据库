
1.1  数据库系统概述
 1.1.1 数据库的4个基本概念
  数据（Data）是数据库中存储的基本对象
  数据的定义
  描述事物的符号记录
  数据的种类
  数字、文字、图形、图像、音频、视频、学生的档案记录等

  数据库的定义
  数据库（Database，简称DB）是长期储存在计算机内、有组织的、可共享的大量数据的集合。
  数据库的基本特征
  数据按一定的数据模型组织、描述和储存
  可为各种用户共享
  冗余度较小
  数据独立性较高
  易扩展

  数据库管理系统
  位于用户与操作系统之间的一层数据管理软件
  是基础软件，是一个大型复杂的软件系统 
  数据库管理系统的用途
  科学地组织和存储数据、高效地获取和维护数据

  数据定义功能
  提供数据定义语言（DDL）
  定义数据库中的数据对象
  数据组织、存储和管理
  分类组织、存储和管理各种数据
  确定组织数据的文件结构和存取方式
  实现数据之间的联系
  提供多种存取方法提高存取效率

  数据操纵功能
  提供数据操纵语言（DML）
  实现对数据库的基本操作  （查询、插入、删除和修改）
  数据库的事务管理和运行管理
  数据库在建立、运行和维护时由数据库管理系统统一管理和控制
  保证数据的安全性、完整性、多用户对数据的并发使用
  发生故障后的系统恢复




























2.1  关系数据结构及形式化定义
 2.1.1  关系
  单一的数据结构----关系
  现实世界的实体以及实体间的各种联系均用关系来表示
  逻辑结构----二维表 
  从用户角度，关系模型中数据的逻辑结构是一张二维表
  建立在集合代数的基础上

  1. 域（Domain）
  域是一组具有相同数据类型的值的集合。例:
  整数
  实数
  介于某个取值范围的整数
  指定长度的字符串集合
  {‘男’，‘女’}

  2. 笛卡尔积（Cartesian Product）
  所有域的所有取值的一个组合
  不能重复
   元组（Tuple）
  (张清玫，计算机专业，刘晨)  等 都是元组 
  分量（Component）
  笛卡尔积元素（d1，d2，…，dn）中的每一个值di 叫作一个分量
  张清玫、计算机专业、李勇、刘晨等都是分量 
   
  基数（Cardinal number）
  若Di（i＝1，2，…，n）为有限集，其基数为mi（i＝1，2，…，n），则D1×D2×…×Dn的基数M为：

  笛卡尔积的表示方法
  笛卡尔积可表示为一张二维表
  表中的每行对应一个元组，表中的每列对应一个域

  3. 关系（Relation）
  R：关系名
  n：关系的目或度（Degree）
  关系中的每个元素是关系中的元组，通常用t表示。
  单元关系与二元关系
  当n=1时，称该关系为单元关系（Unary relation）或一元关系                             
  当n=2时，称该关系为二元关系（Binary relation）
    n目关系必有n个属性                  
                     
    码
  候选码（Candidate key）
    若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码
    简单的情况：候选码只包含一个属性
  全码（All-key）
    最极端的情况：关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）
                 
    主码
  若一个关系有多个候选码，则选定其中一个为主码（Primary key）
  主属性
  候选码的诸属性称为主属性（Prime attribute）
  不包含在任何侯选码中的属性称为非主属性（Non-Prime attribute）或非码属性（Non-key attribute） 
                 
                     
      三类关系
  基本关系（基本表或基表）
  实际存在的表，是实际存储数据的逻辑表示
  查询表
  查询结果对应的表
  视图表
  由基本表或其他视图表导出的表，是虚表，不对
  应实际存储的数据
                 
                     
   基本关系的性质
  ① 列是同质的（Homogeneous）
  ② 不同的列可出自同一个域
  其中的每一列称为一个属性
  不同的属性要给予不同的属性名
  ③ 列的顺序无所谓,，列的次序可以任意交换
  ④ 任意两个元组的候选码不能相同
  ⑤ 行的顺序无所谓，行的次序可以任意交换
  ⑥ 分量必须取原子值
  这是规范条件中最基本的一条
                

 2.1.2  关系模式
  1．什么是关系模式
  关系模式（Relation Schema）是型
  关系是值
  关系模式是对关系的描述
  元组集合的结构
  属性构成
  属性来自的域           
  属性与域之间的映象关系
  完整性约束条件

  2．定义关系模式
  关系模式可以形式化地表示为：
    	R（U，D，DOM，F）
		R       	     关系名
		U       	     组成该关系的属性名集合
		D       	     U中属性所来自的域
		DOM  	     属性向域的映象集合
		F        	     属性间数据的依赖关系的集合

  3.  关系模式与关系
  关系模式
  对关系的描述
  静态的、稳定的
  关系
  关系模式在某一时刻的状态或内容
  动态的、随时间不断变化的
  关系模式和关系往往笼统称为关系
     通过上下文加以区别

 2.1.3  关系数据库
  在一个给定的应用领域中，所有关系的集合构成一个关系数据库
  关系数据库的型与值
  关系数据库的型: 关系数据库模式，是对关系数据库的描述
  关系数据库的值: 关系模式在某一时刻对应的关系的集合，通常称为关系数据库

 2.1.4   关系模型的存储结构
  关系数据库的物理组织
  有的关系数据库管理系统中一个表对应一个操作系统文件，将物理数据组织交给操作系统完成
  有的关系数据库管理系统从操作系统那里申请若干个大的文件，自己划分文件空间，组织表、索引等存储结构，并进行存储管理

2.2  关系操作
 2.2.1 基本的关系操作

  常用的关系操作
  查询操作：选择、投影、连接、除、并、差、交、笛卡尔积
  选择、投影、并、差、笛卡尔基是5种基本操作
  数据更新：插入、删除、修改
  关系操作的特点
  集合操作方式：操作的对象和结果都是集合，一次一集合的方式

2.3  关系的完整性
 关系的三类完整性约束
 实体完整性和参照完整性
 关系模型必须满足的完整性约束条件称为关系的两个不变性，应该由关系系统自动支持
 用户定义的完整性
 应用领域需要遵循的约束条件，体现了具体领域中的语义约束 

 2.3.1 实体完整性
  实体完整性规则的说明
  （1）实体完整性规则是针对基本关系而言的。
         一个基本表通常对应现实世界的一个实体集。
  （2）现实世界中的实体是可区分的，即它们具有某种唯   
          一性标识。
  （3）关系模型中以主码作为唯一性标识。
  （4）主码中的属性即主属性不能取空值。
    主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性

 2.3.2 参照完整性
  2．外码（Foreign Key）
  设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是R的外码
  基本关系R称为参照关系（Referencing  Relation）
  基本关系S称为被参照关系（Referenced Relation）
    或目标关系（Target Relation）

  关系R和S不一定是不同的关系
  目标关系S的主码Ks 和参照关系的外码F必须定义在同一个（或一组）域上
  外码并不一定要与相应的主码同名
     当外码与相应的主码属于不同关系时，往往取相同的名 字，以便于识别

  3. 参照完整性规则
  若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：
  或者取空值（F的每个属性值均为空值）
  或者等于S中某个元组的主码值

 2.3.3 用户定义的完整性
  针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求
  关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不需由应用程序承担这一功能

2.4  关系代数
 关系代数是一种抽象的查询语言，它用对关系的运算来表达查询
  关系代数
  运算对象是关系
  运算结果亦为关系
  关系代数的运算符有两类：集合运算符和专门的关系运算符
  传统的集合运算是从关系的“水平”方向即行的角度进行
  专门的关系运算不仅涉及行而且涉及列

  运　算　符	含　义
   集合
  运算符	       ∪	并
               -	差
               ∩	交
              ×	笛卡尔积
  专门的
  关系
  运算符        	σ	选择
               π	投影
	                连接
                 ÷	除


 2.4.1 传统的集合运算

 2.4.2 专门的关系运算
  1. 选择（Selection）
  选择又称为限制（Restriction）
  选择运算符的含义
  在关系R中选择满足给定条件的诸元组
         σF(R) = {t|tR∧F(t)= '真'}
  F：选择条件，是一个逻辑表达式，取值为“真”或“假”
  基本形式为：X1θY1
  θ表示比较运算符，它可以是＞，≥，＜，≤，＝或<>

  2. 投影（Projection）
  查询学生的姓名和所在系。

  3. 连接（Join）

  悬浮元组（Dangling tuple）
  两个关系R和S在做自然连接时，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，
  从而造成R中这些元组在操作时被舍弃了，这些被舍弃的元组称为悬浮元组。

  4. 除运算（Division）
  查询至少选修1号课程和3号课程的学生号码 。



                               

CREATE TABLE XXXX()建表

INSERT INTO XX(XX,XX,XX)插入信息
VALUES('XX','XX','X')

 query查询
 insert插入
 delete删除
 update修改

 COUNT对元组计数
 TOTAL求总和
 MAX求最大值
 MIN求最小值
 AVG求平均值

 CREATE 创建
 DROP 删除
 ALTER 修改

 SCHEMA 模式
 TABLE 表
 VIEW 视图
 INDEX 索引

3.3
 sql功能 动词
 数据查询 SELECT
 数据定义 CREATE,DROP,ALTER
 数据操纵 INSERT,UPDATE,DELETE
 数据控制 GRANT,REVOKE

 Student 学生表
 学号 姓名 性别 年龄 所在系
 Sno Sname Ssex Sage Sdept

 Course 课程表
 课程号 课程名 先行课 学分
 Cno Cname Cpno Ccredit

 SC 学生选课表
 学号 课程号 成绩
  Sno Cno Grade

 CREATE SCHEMA 模式名 AUTHORIZATION 用户名 表定义子句或 视图定义子句

 删除
 DROP SCHEMA 模式名 CASCADE或者RESTRICT ;
 CASCADE级联 表示删除所有
 RESTRICT限制 如果有东西就不删除

3.3.2 基本表的定义、删除与修改

 3.3.2 1定义基本表

    建立
   CREATE TABLE 表名
  (列名 数据类型 列级完整性约束条件，
  表级完整性约束条件
  FOREIGNN KEY (Cpno) REFERENCES Course(Cno)
  Cpno是外码，被参照的表是Course,被参照的列是Cno
  )

  非空约束(not null)：用not null约束的字段不能为null值，必须给定具体的数据
  唯一性约束(unique)： unique约束的字段，具有唯一性，不可重复，但可以为null
  主键约束(主码)(primary key) PK 如有两个主码 PRIMARY KEY (Sno,Cno),
  外键约束(foreign key) FK
  检查约束(目前MySQL不支持、Oracle支持)

 3.3.2 2数据类型

  CHAR(n),CHARACTER(n) 长度为n的定长字符串
  VARCHAR(n),CHARACTERVARYING(n) 最大长度为n的变长字符串
  CLOB 字符串大对象
  BLOB 二进制大对象
   INT,INTEGER 长整数(4字节)
  SMALLINT 短整数(2字节)
  BIGINT 大整数(8字节)
  NUMERIC(p,d) 定点数，由p位数字(不包括符号、
  小数点)组成，小数点后面有d位数字
  DECIMAL(p,d),DEC(p,d) 同NUMERIC
  REAL 取决于机器精度的单精度浮点数
  DOUBLE PRECISION 取决于机器精度的双精度浮点数
  FLOAT(n) 可选精度的浮点数，精度至少为n位数字
  BOOLEAN 逻辑布尔量
  DATE 日期，包含年、月、日，格式为YYY-MM-DD
  TIME 时间，包含一日的时、分、秒，格式为HH:MM:SS
  TIMESTAMP 时间戳类型
  INTERVAL 时间间隔类型

 3.3.2 3模式与表
  每一个基本表都属于某一个模式
  一个模式包含多个基本表
  定义基本表所属模式
  方法一：在表名中明显地给出模式名
  Create table"S-T".Student(......); /*模式名为 S-T*/
  Create table "S-T".Cource(......);
  Create table "S-T".SC(......);
  方法二：在创建模式语句中同时创建表
  方法三：设置所属的模式

 3.3.2 4修改基本表

  ALTER TABLE <表名>
  [ ADD[COLUMN] <新列名> <数据类型> [ 完整性约束 ] ]
  [ ADD <表级完整性约束>]
  [ DROP [ COLUMN ] <列名> [CASCADE| RESTRICT] ]
  [ DROP CONSTRAINT<完整性约束名>[ RESTRICT | CASCADE ] ]
  [ALTER COLUMN <列名><数据类型> ]                         ;

  ADD子句用于增加新列、新的列级完整性约束条件和新的表级完整性约束条件
  DROP COLUMN子句用于删除表中的列
  如果指定了CASCADE短语，则自动删除引用了该列的其他对象
  如果指定了RESTRICT短语，则如果该列被其他对象引用，关系数据库管理系统将拒绝删除该列
  DROP CONSTRAINT子句用于删除指定的完整性约束条件
  ALTER COLUMN子句用于修改原有的列定义，包括修改列名和数据类型

  增加“入学时间”列，其数据类型为日期型
  ALTER TABLE Student ADD S_entrance DATE                   ;
  增加课程名称必须取唯一值的约束条件。
  ALTER TABLE Course ADD UNIQUE(Cname)                      ;

  将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。
  ALTER TABLE Student ALTER COLUMN Sage INT                                                        ;

 3.3.2 5删除基本表
  DROP TABLE <表名>［RESTRICT| CASCADE］                      ;
  RESTRICT：删除表是有限制的。
  欲删除的基本表不能被其他表的约束所引用
  如果存在依赖该表的对象，则此表不能被删除
  CASCADE：删除该表没有限制。
  在删除基本表的同时，相关的依赖对象一起删除

  DROP TABLE Student CASCADE                                         ;
  基本表定义被删除，数据被删除
  表上建立的索引、视图、触发器等一般也将被删除

 3.3.3 索引的建立与删除

  建立索引的目的：加快查询速度
  关系数据库管理系统中常见索引：
  顺序文件上的索引
  B+树索引
  散列（hash）索引
  位图索引
  特点：
  B+树索引具有动态平衡的优点
  HASH索引具有查找速度快的特点

  CREATE [UNIQUE] [CLUSTER] INDEX <索引名>
  ON <表名>(<列名>[<次序>][,<列名>[<次序>] ]…)                                   ;
  <表名>：要建索引的基本表的名字
  索引：可以建立在该表的一列或多列上，各列名之间用逗号分隔
  <次序>：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASC
  UNIQUE：此索引的每一个索引值只对应唯一的数据记录
  CLUSTER：表示要建立的索引是聚簇索引

  Student表按学号升序建唯一索引，Course表按课程号升序建唯一索引，SC表按学号升序和课程号降序建唯一索引

  CREATE UNIQUE INDEX Stusno ON Student(Sno)       ;
  CREATE UNIQUE INDEX Coucno ON Course(Cno)        ;
  CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno DESC) ;

  ALTER INDEX <旧索引名> RENAME TO <新索引名>

  [例3.14] 将SC表的SCno索引名改为SCSno
	ALTER INDEX SCno RENAME TO SCSno             ;

  DROP INDEX <索引名>                                                ;
  删除索引时，系统会从数据字典中删去有关该索引的
  描述。
  [例3.15] 删除Student表的Stusname索引
	 DROP INDEX Stusname                                                 ;

 3.3.4 数据字典
  数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有定义信息：
  关系模式定义
  视图定义
  索引定义
  完整性约束定义
  各类用户对数据库的操作权限
  统计信息等
  关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息。

3.4数据查询

 SELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>] …
 FROM <表名或视图名>[,<表名或视图名> ]…|(SELECT 语句)
 [AS]<别名>
 [ WHERE <条件表达式> ]
 [ GROUP BY <列名1> [ HAVING <条件表达式> ] ]
 [ ORDER BY <列名2> [ ASC|DESC ] ]                                   ;

 SELECT子句：指定要显示的属性列
 FROM子句：指定查询对象（基本表或视图）
 WHERE子句：指定查询条件
 GROUP BY子句：对查询结果按指定列的值分组，该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。
 HAVING短语：只有满足指定条件的组才予以输出
 ORDER BY子句：对查询结果表按指定列值的升序或降序排序

 3.4.1 单表查询

  DISTINCT 去掉重复
  查 询 条 件	 谓 词
  比 较	 =, >, <, >=, <=, !=, <>, !>, !<
  确定范围	 BETWEEN AND, NOT BETWEEN AND
  确定集合	 IN, NOT IN
  字符匹配	 LIKE, NOT LIKE
  空 值	 IS NULL, IS NOT NULL
  多重条件（逻辑运算）	 AND, OR, NOT

  谓词： [NOT] LIKE ‘<匹配串>’ [ESCAPE ‘ <换码字符>’]

  <匹配串>可以是一个完整的字符串，也可以含有通配符%和 _

  %  （百分号） 代表任意长度（长度可以为0）的字符串
  例如a%b表示以a开头，以b结尾的任意长度的字符串
  _ （下横线） 代表任意单个字符。
  例如a_b表示以a开头，以b结尾的长度为3的任意字符串

  使用换码字符将通配符转义为普通字符

  [例3.34] 查询DB_Design课程的课程号和学分。
  SELECT Cno，Ccredit
  FROM Course
  WHERE Cname LIKE 'DB\_Design' ESCAPE '\ ';
  [例3.35] 查询以"DB_"开头，且倒数第3个字符为 i的课程的详细情况。
  SELECT *
  FROM Course
  WHERE Cname LIKE 'DB\_%i_ _' ESCAPE '\ ';

	ESCAPE '＼' 表示“ ＼” 为换码字符

  is不能用=代替

  ORDER BY子句
  可以按一个或多个属性列排序
  升序：ASC;降序：DESC;缺省值为升序
  对于空值，排序时显示的次序由具体系统实现来决定




  聚集函数：
  统计元组个数
  COUNT(*)
  统计一列中值的个数
  COUNT([DISTINCT|ALL] <列名>)
  计算一列值的总和（此列必须为数值型）
  SUM([DISTINCT|ALL] <列名>)	
  计算一列值的平均值（此列必须为数值型）
  AVG([DISTINCT|ALL] <列名>)
  求一列中的最大值和最小值
	 MAX([DISTINCT|ALL] <列名>)
	 MIN([DISTINCT|ALL] <列名>)

   除了COUNT(*)外只处理非空值
   只能作用与select和GROUP BY 中的HAVING子句

   GROUP BY子句分组：
     细化聚集函数的作用对象（分组统计）
    如果未对查询结果分组，聚集函数将作用于整个查询结果
   对查询结果分组后，聚集函数将分别作用于每个组 
   按指定的一列或多列值分组，值相等的为一组
   
   HAVING短语与WHERE子句的区别：
   作用对象不同
   WHERE子句作用于基表或视图，从中选择满足条件的元组
   HAVING短语作用于组，从中选择满足条件的组。

 3.4.2连接查询

  连接条件或连接谓词：用来连接两个表的条件
	 一般格式：
  [<表名1>.]<列名1>  <比较运算符>  [<表名2>.]<列名2>
  [<表名1>.]<列名1> BETWEEN [<表名2>.]<列名2> AND [<表名2>.]<列名3>
  连接字段：连接谓词中的列名称
  连接条件中的各连接字段类型必须是可比的，但名字不必相同

  等值连接：连接运算符为=
  1）嵌套循环法（NESTED-LOOP）
  （2）索引连接（INDEX-JOIN）
  对表2按连接字段建立索引
  对表1中的每个元组，依次根据其连接字段值查询表2的索引，从中找到满足条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组

  自然连接
  把目标列中重复的属性列去了则为自然连接。

  一条SQL语句可以同时完成选择和连接查询，这时WHERE子句是由连接谓词和选择谓词组成的复合条件。

  2.自身连接
  自身连接：一个表与其自己进行连接
  需要给表起别名以示区别
  由于所有属性名都是同名属性，因此必须使用别名前缀

  3. 外连接
  外连接与普通连接的区别
  普通连接操作只输出满足连接条件的元组
  外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出
  左外连接
  列出左边关系中所有的元组 
  右外连接
  列出右边关系中所有的元组 
  left outer join 与 left join 等价，一般写成left join 
  right outer join 与 right join等价，一般写成right join
  SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade
    FROM  Student  LEFT OUTER  JOIN SC ON    
                 (Student.Sno=SC.Sno); 

  4. 多表连接
  SELECT Student.Sno, Sname, Cname, Grade
   FROM    Student, SC, Course    /*多表连接*/
   WHERE Student.Sno = SC.Sno 
                  AND SC.Cno = Course.Cno;

 3.4.3嵌套查询 

  一个SELECT-FROM-WHERE语句称为一个查询块
  将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询

  SELECT Sname	 /*外层查询/父查询*/
  FROM Student
  WHERE Sno IN
  ( SELECT Sno /*内层查询/子查询*/
  FROM SC
  WHERE Cno= ' 2 ');
  上层的查询块称为外层查询或父查询
  下层查询块称为内层查询或子查询
  SQL语言允许多层嵌套查询
  即一个子查询中还可以嵌套其他子查询
  子查询的限制
  不能使用ORDER BY子句
  不相关子查询：
  子查询的查询条件不依赖于父查询
  由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。

  相关子查询：子查询的查询条件依赖于父查询
  首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表
  然后再取外层表的下一个元组
  重复这一过程，直至外层表全部检查完为止

  使用ANY或ALL谓词时必须同时使用比较运算
  语义为：
  > ANY	大于子查询结果中的某个值
  > ALL	大于子查询结果中的所有值
  < ANY	小于子查询结果中的某个值
  < ALL	小于子查询结果中的所有值
  >= ANY	大于等于子查询结果中的某个值
  >= ALL	大于等于子查询结果中的所有值
  <= ANY	小于等于子查询结果中的某个值
  <= ALL	小于等于子查询结果中的所有值
  = ANY	等于子查询结果中的某个值
  =ALL	等于子查询结果中的所有值（通常没有实际意义）
  !=（或<>）ANY	不等于子查询结果中的某个值
  !=（或<>）ALL	不等于子查询结果中的任何一个值

  EXISTS谓词
  带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”。
  若内层查询结果非空，则外层的WHERE子句返回真值
  若内层查询结果为空，则外层的WHERE子句返回假值
  由EXISTS引出的子查询，其目标列表达式通常都用 * ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义。

  NOT EXISTS谓词
  若内层查询结果非空，则外层的WHERE子句返回假值
  若内层查询结果为空，则外层的WHERE子句返回真值

 3.4.4集合查询
  集合操作的种类
  并操作UNION
  交操作INTERSECT
  差操作EXCEPT
  参加集合操作的各查询结果的列数必须相同 ;对应项的数据类型也必须相同

  UNION：将多个查询结果合并起来时，系统自动去掉重复元组
  UNION ALL：将多个查询结果合并起来时，保留重复元组 

 3.4.5基于派生表的查询
  子查询不仅可以出现在WHERE子句中，还可以出现在FROM子句中，这时子查询生成的临时派生表（Derived Table）成为主查询的查询对象

  如果子查询中没有聚集函数，派生表可以不指定属性列，子查询SELECT子句后面的列名为其缺省属性。
  as可以省略
 3.4.6select语句的一般格式
  
3.5数据更新
 3.5.1插入数据  
  1. 插入元组
  INSERT
	INTO <表名> [(<属性列1>[,<属性列2 >…)]
	VALUES (<常量1> [,<常量2>]… );

  指定要插入数据的表名及属性列
  属性列的顺序可与表定义中的顺序不一致
  没有指定属性列：表示要插入的是一条完整的元组，且属性列属性与表定义中的顺序一致
  指定部分属性列：插入的元组在其余属性列上取空值

  VALUES子句
  提供的值必须与INTO子句匹配
  值的个数
  值的类型

  2. 插入子查询结果
   INSERT 
     INTO <表名>  [(<属性列1> [,<属性列2>…  )]
 	子查询;

  INTO子句
  子查询
  SELECT子句目标列必须与INTO子句匹配
  值的个数
  值的类型

  对每一个系，求学生的平均年龄，并把结果存入数据库
  第一步：建表
      CREATE  TABLE  Dept_age
          ( Sdept     CHAR(15)                     /*系名*/
            Avg_age SMALLINT);          	/*学生平均年龄*/
  第二步：插入数据
        INSERT
       INTO  Dept_age(Sdept,Avg_age)
              SELECT  Sdept，AVG(Sage)
              FROM     Student
              GROUP BY Sdept;

  关系数据库管理系统在执行插入语句时会检查所插元组是否破坏表上已定义的完整性规则
  实体完整性
  参照完整性
  用户定义的完整性
  NOT NULL约束
  UNIQUE约束
  值域约束

 3.5.2  修改数据

  UPDATE  <表名>
    SET  <列名>=<表达式>[,<列名>=<表达式>]…
    [WHERE <条件>];

  功能
  修改指定表中满足WHERE子句条件的元组
  SET子句给出<表达式>的值用于取代相应的属性列
  如果省略WHERE子句，表示要修改表中的所有元组

  1. 修改某一个元组的值

  2. 修改多个元组的值

  3. 带子查询的修改语句
  将计算机科学系全体学生的成绩置零。
        UPDATE SC
        SET     Grade=0
        WHERE Sno  IN
               (SELETE Sno
                FROM     Student
                WHERE  Sdept= 'CS' );

  关系数据库管理系统在执行修改语句时会检查修改操作是否破坏表上已定义的完整性规则
  实体完整性
  主码不允许修改
  用户定义的完整性
  NOT NULL约束
  UNIQUE约束
  值域约束

 3.5.3  删除数据 
   DELETE
       FROM     <表名>
       [WHERE <条件>];
  功能
  删除指定表中满足WHERE子句条件的元组
  WHERE子句
  指定要删除的元组
  缺省表示要删除表中的全部元组，表的定义仍在字典中

  1. 删除某一个元组的值

  2. 删除多个元组的值

  3. 带子查询的删除语句

3.6 空值的处理
  空值就是“不知道”或“不存在”或“无意义”的值。
  一般有以下几种情况：
  该属性应该有一个值，但目前不知道它的具体值
  该属性不应该有值
  由于某种原因不便于填写

  判断一个属性的值是否为空值，用IS NULL或IS NOT NULL来表示。

  [例 3.81]  从Student表中找出漏填了数据的学生信息
	SELECT  *
	FROM Student
	WHERE Sname IS NULL OR Ssex IS NULL OR Sage IS NULL OR Sdept IS NULL;

  3. 空值的约束条件

  属性定义（或者域定义）中
  有NOT NULL约束条件的不能取空值
  加了UNIQUE限制的属性不能取空值
  码属性不能取空值

  4. 空值的算术运算、比较运算和逻辑运算
  空值与另一个值（包括另一个空值）的算术运算的结果为空值
  空值与另一个值（包括另一个空值）的比较运算的结果为UNKNOWN。
  有UNKNOWN后，传统二值（TRUE，FALSE）逻辑就扩展成了三值逻辑

    x      y	    x AND y	   x OR y	   NOT x
    T      T	       T	         T	     F
    T      U	       U	         T	     F
    T      F	       F	         T	     F
    U     T	         U	         T	     U
    U     U	         U	         U	     U
    U     F	         F	         U	     U
    F     T	         F	         T	     T
    F     U	         F	         U	     T
    F     F	         F	         F	     T

  [例3.82]  找出选修1号课程的不及格的学生。
   SELECT Sno
   FROM SC
   WHERE Grade < 60 AND Cno='1';

   查询结果不包括缺考的学生，因为他们的Grade值为
   null。

  


  [例 3.83]  选出选修1号课程的不及格的学生以及缺考的学生
  SELECT Sno
  FROM SC
  WHERE Grade < 60 AND Cno='1'
  UNION
  SELECT Sno
  FROM SC
  WHERE Grade IS NULL AND Cno='1'
  或者
  SELECT Sno
  FROM SC
  WHERE Cno='1' AND (Grade<60 OR Grade IS NULL);

3.7视图
 视图的特点
 虚表，是从一个或几个基本表（或视图）导出的表
 只存放视图的定义，不存放视图对应的数据
 基表中的数据发生变化，从视图中查询出的数据也随之改变

 3.7.1  定义视图
  1. 建立视图
  CREATE  VIEW 
             <视图名>  [(<列名>  [,<列名>]…)]
       AS  <子查询>
       [WITH  CHECK  OPTION];

  WITH CHECK OPTION
  对视图进行UPDATE，INSERT和DELETE操作时要保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）
  子查询可以是任意的SELECT语句，是否可以含有ORDER BY子句和DISTINCT短语，则决定具体系统的实现。

  组成视图的属性列名：全部省略或全部指定
  全部省略: 
  由子查询中SELECT目标列中的诸字段组成
  明确指定视图的所有列名:
  某个目标列是聚集函数或列表达式
  多表连接时选出了几个同名列作为视图的字段
  需要在视图中为某个列启用新的更合适的名字

  在对视图查询时，按视图的定义从基本表中将数据查出。只有用视图的时候才生成一个视图

  定义IS_Student视图时加上了WITH CHECK OPTION子句，
  对该视图进行插入、修改和删除操作时，RDBMS会自动加上Sdept='IS'的条件。
  若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，
  但保留了主码，我们称这类视图为行列子集视图。一个基本表的一部分


  带表达式的视图

  [例3.88]  定义一个反映学生出生年份的视图。
        CREATE  VIEW BT_S(Sno,Sname,Sbirth)
        AS 
        SELECT Sno,Sname,2014-Sage
        FROM  Student;


  [例3.90]将Student表中所有女生记录定义为一个视图
      CREATE VIEW F_Student(F_Sno,name,sex,age,dept)
      AS
      SELECT  *                        /*没有指定属性列*/
      FROM  Student
      WHERE Ssex=‘女’;
     缺点：
    修改基表Student的结构后，Student表与F_Student视图  的映象关系被破坏，导致该视图不能正确工作。

  2. 删除视图
  语句的格式：
		DROP  VIEW  <视图名>[CASCADE];
  该语句从数据字典中删除指定的视图定义
  如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除 
  删除基表时，由该基表导出的所有视图定义还存在，必须显式地使用DROP VIEW语句删除 

   [例3.91 ] 删除视图BT_S和IS_S1
		DROP VIEW BT_S;	/*成功执行*/
		DROP VIEW IS_S1;	/*拒绝执行，因为 IS_S2 */
	      
           要删除IS_S1，需使用级联删除：
           DROP VIEW IS_S1 CASCADE;  

 3.7.2  查询视图

  用户角度：查询视图与查询基本表相同
  关系数据库管理系统实现视图查询的方法
  视图消解法（View Resolution）
  进行有效性检查
  转换成等价的对基本表的查询
  执行修正后的查询




 3.7.3  更新视图

  更新视图的限制：一些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新

  例：例3.89定义的视图S_G为不可更新视图。
  UPDATE  S_G
  SET          Gavg=90     没有基本表中有这个属性
  WHERE  Sno= '201215121';

  这个对视图的更新无法转换成对基本表SC的更新

  允许对行列子集视图进行更新（是基本表的一部分）
  对其他类型视图的更新不同系统有不同限制


 3.7.4  视图的作用

  视图能够简化用户的操作
  视图使用户能以多种角度看待同一数据 
  视图对重构数据库提供了一定程度的逻辑独立性 
  视图能够对机密数据提供安全保护
  适当的利用视图可以更清晰的表达查询

  视图能够简化用户的操作
    当视图中数据不是直接来自基本表时，定义视图能够简化用户的操作
  基于多张表连接形成的视图
  基于复杂嵌套查询的视图
  含导出属性的视图

4数据库安全性
数据库管理系统提供的主要技术有强制存取控制、数据加密存储和加密传输等。















































































