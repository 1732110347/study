6.1结构程序设计
1. 接口设计

2. 数据设计


如果只允许使用顺序、IF-THEN-ELSE型分支和DO-WHILE型循环这3种基本控制结构，则称为经典的结构程序设计；
如果除了上述3种基本控制结构之外，还允许使用DO-CASE型多分支结构和DO-UNTIL型循环结构，则称为扩展的结构程序设计；
如果再允许使用LEAVE(或BREAK)结构，则称为修正的结构程序设计。

6.2   人机界面设计
6.2.1 设计问题

系统响应时间。
用户帮助设施。
出错信息处理。
命令交互。

6.2.2.设计过程

6.2.3 人机界面设计指南
一般交互指南：涉及信息显示、数据输入和系统整体控制

信息显示指南：多种不同方式“显示”信息：用文字、图形和声音；按位置、移动和大小；使用颜色、分辨率和省略。

数据输入指南：用户的大部分时间用在选择命令、输入数据和向系统提供输入。

6.3 过程设计的工具
6.3.1 程序流程图

程序流程图的主要缺点如下：
(1) 程序流程图本质上不是逐步求精的好工具，它诱使程序员过早地考虑程序的控制流程，而不去考虑程序的全局结构。
(2) 程序流程图中用箭头代表控制流，因此程序员不受任何约束，可以完全不顾结构程序设计的精神，随意转移控制。
(3) 程序流程图不易表示数据结构。

6.3.2 盒图
N-S图有下述特点：
(1) 功能域(即一个特定控制结构的作用域)明确，可以从盒图上一眼就看出来。
(2) 不可能任意转移控制。
(3) 很容易确定局部和全程数据的作用域。
(4) 很容易表现嵌套关系，也可以表示模块的层次结构。

优点：支持自顶向下逐步求精的结构化详细设计，并且严格限制了控制从一个处理到另一个处理的转移。

6.3.3 PAD图
PAD图的主要优点如下：
(1)PAD图所描绘的程序结构十分清晰，用PAD图表现程序逻辑，易读、易懂、易记。
(4) 容易将PAD图转换成高级语言源程序，这种转换可用软件工具自动完成，从而可省去人工编码的工作，有利于提高软件可靠性和软件生产率。
(5) 即可用于表示程序逻辑，也可用于描绘数据结构。
(6) PAD图的符号支持自顶向下、逐步求精方法的使用。

6.3.4 判定表
当算法中包含多重嵌套的条件选择时，有程序流程图、盒图、PAD图都不易清楚地描述。
判定表能够清晰地表示复杂的条件组合与应做的动作之间的对应关系。
判定表由4部分组成，
左上部列出所有条件
左下部是所有可能做的动作
右上部是表示各种条件组合的一个矩阵
右下部是和每种条件组合相对应的动作。
判定表右半部的每一列实质上是一条规则，规定了与特定的条件组合相对应的动作。


6.3.5 判定树
判定树是判定表的变种，它也能清晰地表示复杂的条件组合与应做的动作之间的对应关系，但简洁性不如判定表。

6.3.6 过程设计语言

过程设计语言（PDL，Program Design Language，类程序设计语言）也称为伪码，是用正文形式表示数据和处理过程的设计工具。

伪码是一种混合语言，外部采用形式语言定义控制结构和数据结构，内部使用自然语言。


6.4   面向数据结构的设计方法




