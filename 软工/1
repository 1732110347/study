软件生命周期由软件定义、软件开发和运行维护(也称为软件维护)3个时期组成，
每个时期又进一步划分成若干个阶段。

软件定义时期的任务是： 确定软件开发工程必须完成的总目标；确定工程的可行性；
导出实现工程目标应该采用的策略及系统必须完成的功能；估计完成该项工程需要的资源和成本，
并且制定工程进度表。这个时期的工作通常又称为系统分析，由系统分析员负责完成。






5

总体设计
体系结构设计
模块设计
接口设计
数据设计（文件系统结构、数据库表结构）
详细设计
模块内部设计（数据结构和算法设计）

2.选取合理的方案
对每个合理的方案，分析员都应该准备下列4份资料。
(1) 系统流程图。
(2) 组成系统的物理元素清单。
(3) 成本/效益分析。
(4) 实现这个系统的进度计划。

3.推荐最佳方案

4.功能分解
首先进行结构设计，然后进行过程设计。

5. 设计软件结构

6. 设计数据库

7.制定测试计划

8. 书写文档
系统说明
用户手册
测试计划包括测试策略，测试方案，预期的测试结果，测试进度计划等
详细的实现计划
数据库设计结果

9.审查和复审


5.2  设计原理
5.2.1 模块化
5.2.2 抽象
5.2.3 逐步求精
求精实际上是细化过程。
抽象与求精是一对互补的概念。
5.2.4 信息隐藏和局部化
5.2.5 模块独立
模块的独立程度可以由两个定性标准度量，这两个标准分别称为内聚和耦合。


1 耦合
耦合是对一个软件结构内不同模块之间互连程度的度量。
耦合强弱取决于模块间接口的复杂程度，进入或访问一个模块的点，以及通过接口的数据。

耦合的强度所依赖的因素
一个模块对另一个模块的引用
一个模块向另一个传递的数据量
一个模块施加到另一个模块的控制的数量
模块之间接口的复杂程度

耦合类型（由弱到强）：数据耦合、控制耦合、特征耦合、公共环境耦合和内容耦合。

数据耦合
两个模块彼此间通过参数交换信息，而且交换的信息仅仅是数据（基本类型的），那么这种耦合称为数据耦合。数据耦合是低耦合。系统中至少必须存在这种耦合。
控制耦合
传递的信息中有控制信息(尽管有时这种控制信息以数据的形式出现)，则这种耦合称为控制耦合。控制耦合是中等程度的耦合。
特征耦合
当把整个数据结构作为参数传递而被调用的模块只需要使用其中一部分数据元素时，就出现了特征耦合。
公共环境耦合
当两个或多个模块通过一个公共数据环境相互作用时，它们之间的耦合称为公共环境耦合。
公共环境可以是全程变量、共享的通信区、内存的公共覆盖区、任何存储介质上的文件、物理设备等。
公共环境耦合的复杂程度随耦合的模块个数而变化，当耦合的模块个数增加时复杂程度显著增加。

只有两个模块有公共环境，耦合有下面两种可能。
(1) 一个模块往公共环境送数据，另一个模块从公共环境取数据。这是数据耦合的一种形式，是比较松散的耦合。
(2) 两个模块都既往公共环境送数据又从里面取数据，这种耦合比较紧密，介于数据耦合和控制耦合之间。

内容耦合
最高程度的耦合是内容耦合。如果出现下列情况之一，两个模块间就发生了内容耦合。
一个模块访问另一个模块的内部数据。
 一个模块不通过正常入口而转到另一个模块的内部。
 一个模块有多个入口(这意味着一个模块有几种功能)。

应该坚决避免使用内容耦合。

2） 内聚
内聚是对一个模块之内各成分之间相互依赖程度的度量。
内聚标志着一个模块内各个元素彼此结合的紧密程度，它是信息隐藏和局部化概念的自然扩展。
理想内聚的模块只做一件事情，即模块的功能单一，模块的各部分都和模块的功能直接相关。
内聚和耦合是密切相关的，模块内的高内聚往往意味着模块间的松耦合。
内聚分为三大类低内聚、中内聚和高内聚。

低内聚
一个模块完成一组任务，这些任务彼此间即使有关系，关系也是很松散的，就叫做偶然内聚。
一个模块完成的任务在逻辑上属于相同或相似的一类，则称为逻辑内聚。
一个模块包含的任务必须在同一段时间内执行，就叫时间内聚。

中内聚
一个模块内的处理元素是相关的，而且必须以特定次序执行，则称为过程内聚。
各模块成分都使用操作或生成同一数据集，则称为通信内聚。
高内聚
模块内的各处理元素和同一个功能密切相关，且一个处理元素的输出数据作为下一个处理元素的输入数据，则称为顺序内聚。
模块内所有处理元素完成单一的功能，则称为功能内聚。




































